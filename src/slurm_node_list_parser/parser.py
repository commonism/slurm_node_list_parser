#!/usr/bin/env python3

# WARNING: CAVEAT UTILITOR
#
#  This file was automatically generated by TatSu.
#
#     https://pypi.python.org/pypi/tatsu/
#
#  Any changes you make to it will be overwritten the next time
#  the file is generated.

# ruff: noqa: C405, COM812, I001, F401, PLR1702, PLC2801, SIM117

import sys
from pathlib import Path

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main


KEYWORDS: set[str] = set()


class slurm_node_listBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace='',
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)

        super().__init__(text, config=config)


class slurm_node_listParser(Parser):
    def __init__(self, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace='',
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)

        super().__init__(config=config)

    @tatsumasu()
    def _start_(self):
        self._nodes_()

    @tatsumasu()
    def _nodes_(self):

        def sep0():
            self._token(',')

        def block1():
            self._node_()
        self._positive_gather(block1, sep0)

    @tatsumasu()
    def _node_(self):

        def block0():
            self._segments_()
        self._positive_closure(block0)
        self.name_last_node('segments')

    @tatsumasu()
    def _segments_(self):
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._bracketed_()
            self._error(
                'expecting one of: '
                "'[' <bracketed> <identifier>"
                '[a-zA-Z0-9-]+'
            )

    @tatsumasu()
    def _bracketed_(self):
        self._token('[')

        def sep0():
            self._token(',')

        def block1():
            self._range_list_()
        self._positive_gather(block1, sep0)
        self._token(']')

    @tatsumasu()
    def _identifier_(self):
        self._pattern('[a-zA-Z0-9-]+')

    @tatsumasu()
    def _nodespec_(self):
        self._identifier_()

    @tatsumasu()
    def _number_(self):
        self._pattern('[0-9]+')

    @tatsumasu()
    def _range_list_(self):
        with self._choice():
            with self._option():
                self._constant('range')
                self.name_last_node('type')
                self._number_()
                self.name_last_node('begin')
                self._token('-')
                self._number_()
                self.name_last_node('end')
                self._define(['begin', 'end', 'type'], [])
            with self._option():
                self._constant('item')
                self.name_last_node('type')
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            self._error(
                'expecting one of: '
                '<identifier> <number> [0-9]+'
                '[a-zA-Z0-9-]+'
            )


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        text = Path(filename).read_text()
    parser = slurm_node_listParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs,
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, slurm_node_listParser, name='slurm_node_list')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
